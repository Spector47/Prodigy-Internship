def solve_sudoku(grid):
    """Solves a Sudoku puzzle using backtracking.

    Args:
        grid: A 9x9 list representing the Sudoku puzzle.

    Returns:
        True if the puzzle was solved, False otherwise.
    """

    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

def is_valid(grid, row, col, num):
    """Checks if a number is valid for a given cell in the Sudoku grid.

    Args:
        grid: A 9x9 list representing the Sudoku puzzle.
        row: The row index of the cell.
        col: The column index of the cell.
        num: The number to check.

    Returns:
        True if the number is valid, False otherwise.
    """

    for i in range(9):
        if grid[row][i] == num or grid[i][col] == num:
            return False

    start_row = (row // 3) * 3
    start_col = (col // 3) * 3
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if grid[i][j] == num:
                return False

    return True

# Example usage:
puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

if solve_sudoku(puzzle):
    for row in puzzle:
        print(row)
else:
    print("No solution exists.")
